{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/controller/applicationcontroller.js","filenameRelative":"/controller/applicationcontroller.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/controller/applicationcontroller.js.map","sourceFileName":"/controller/applicationcontroller.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"applicationcontroller"},"ignored":false,"code":"main2Controller = RouteController.extend({\n  subscriptions: function () {\n    function subscriptions() {\n      // set up the subscriptions for the route and optionally\n      // wait on them like this:\n      //\n      this.subscribe('rsvps').wait();\n      //\n      // \"Waiting\" on a subscription does not block. Instead,\n      // the subscription handle is added to a reactive list\n      // and when all items in this list are ready, this.ready()\n      // returns true in any of your route functions.\n    }\n\n    return subscriptions;\n  }(),\n\n  data: function () {\n    function data() {\n      return {\n        rsvps: Rsvps.find({}, { sort: { createdAt: -1 }, limit: 100 })\n      };\n      // return a global data context like this:\n      // Items.findOne({_id: this.params._id});\n    }\n\n    return data;\n  }(),\n\n  action: function () {\n    function action() {\n\n      // You can create as many action functions as you'd like.\n      // This is the primary function for running your route.\n      // Usually it just renders a template to a page. But it\n      // might also perform some conditional logic. Override\n      // the data context by providing it as an option in the\n      // last parameter.\n      this.render('application', {/* data: {} */});\n    }\n\n    return action;\n  }()\n});\nDashboardController = RouteController.extend({\n\n  subscriptions: function () {\n    function subscriptions() {\n      // set up the subscriptions for the route and optionally\n      // wait on them like this:\n      //\n      this.subscribe('rsvps').wait();\n      //\n      // \"Waiting\" on a subscription does not block. Instead,\n      // the subscription handle is added to a reactive list\n      // and when all items in this list are ready, this.ready()\n      // returns true in any of your route functions.\n    }\n\n    return subscriptions;\n  }(),\n\n  data: function () {\n    function data() {\n      return {\n        rsvps: Rsvps.find({}, { sort: { createdAt: -1 }, limit: 50 })\n      };\n      // return a global data context like this:\n      // Items.findOne({_id: this.params._id});\n    }\n\n    return data;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/controller/applicationcontroller.js"],"names":[],"mappings":"AAAA,kBAAkB,gBAAgB,MAAhB,CAAuB;AACvC;AAAe,6BAAY;;;;AAIzB,WAAK,SAAL,CAAe,OAAf,EAAwB,IAAxB;;;;;;AAMD;;AAVD;AAAA,KADuC;;AAavC;AAAM,oBAAY;AAChB,aAAO;AACL,eAAO,MAAM,IAAN,CAAW,EAAX,EAAe,EAAE,MAAK,EAAE,WAAW,CAAC,CAAd,EAAP,EAA0B,OAAM,GAAhC,EAAf;AADF,OAAP;;;AAKD;;AAND;AAAA,KAbuC;;AAqBvC;AAAQ,sBAAY;;;;;;;;AAQlB,WAAK,MAAL,CAAY,aAAZ,EAA2B,C,cAAA,CAA3B;AACD;;AATD;AAAA;AArBuC,CAAvB,CAAlB;AAgCA,sBAAsB,gBAAgB,MAAhB,CAAuB;;AAE3C;AAAe,6BAAY;;;;AAIzB,WAAK,SAAL,CAAe,OAAf,EAAwB,IAAxB;;;;;;AAMD;;AAVD;AAAA,KAF2C;;AAc3C;AAAM,oBAAY;AAChB,aAAO;AACL,eAAO,MAAM,IAAN,CAAW,EAAX,EAAe,EAAE,MAAK,EAAE,WAAW,CAAC,CAAd,EAAP,EAA0B,OAAM,EAAhC,EAAf;AADF,OAAP;;;AAKD;;AAND;AAAA;AAd2C,CAAvB,CAAtB","file":"/controller/applicationcontroller.js.map","sourcesContent":["main2Controller = RouteController.extend({\n  subscriptions: function () {\n    // set up the subscriptions for the route and optionally\n    // wait on them like this:\n    //\n    this.subscribe('rsvps').wait();\n    //\n    // \"Waiting\" on a subscription does not block. Instead,\n    // the subscription handle is added to a reactive list\n    // and when all items in this list are ready, this.ready()\n    // returns true in any of your route functions.\n  },\n\n  data: function () {\n    return {\n      rsvps: Rsvps.find({}, { sort:{ createdAt: -1 }, limit:100 })\n    }\n    // return a global data context like this:\n    // Items.findOne({_id: this.params._id});\n  },\n\n  action: function () {\n    \n    // You can create as many action functions as you'd like.\n    // This is the primary function for running your route.\n    // Usually it just renders a template to a page. But it\n    // might also perform some conditional logic. Override\n    // the data context by providing it as an option in the\n    // last parameter.\n    this.render('application', { /* data: {} */});\n  }\n});\nDashboardController = RouteController.extend({\n  \n  subscriptions: function () {\n    // set up the subscriptions for the route and optionally\n    // wait on them like this:\n    //\n    this.subscribe('rsvps').wait();\n    //\n    // \"Waiting\" on a subscription does not block. Instead,\n    // the subscription handle is added to a reactive list\n    // and when all items in this list are ready, this.ready()\n    // returns true in any of your route functions.\n  },\n\n  data: function () {\n    return {\n      rsvps: Rsvps.find({}, { sort:{ createdAt: -1 }, limit:50 })\n    }\n    // return a global data context like this:\n    // Items.findOne({_id: this.params._id});\n  }\n});"]},"hash":"9ff8aea5e44975d33d79596dc5edbda80e27b0fa"}
