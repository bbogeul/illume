{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/controller/mainController.js","filenameRelative":"/controller/mainController.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/controller/mainController.js.map","sourceFileName":"/controller/mainController.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"mainController"},"ignored":false,"code":"mainController = RouteController.extend({\n  subscriptions: function subscriptions() {\n    // set up the subscriptions for the route and optionally\n    // wait on them like this:\n    //\n    this.subscribe('rsvps').wait();\n    //\n    // \"Waiting\" on a subscription does not block. Instead,\n    // the subscription handle is added to a reactive list\n    // and when all items in this list are ready, this.ready()\n    // returns true in any of your route functions.\n  },\n\n  data: function data() {\n    return {\n      rsvps: Rsvps.find({}, { sort: { createdAt: -1 }, limit: 1 })\n    };\n    // return a global data context like this:\n    // Items.findOne({_id: this.params._id});\n  },\n\n  action: function action() {\n\n    // You can create as many action functions as you'd like.\n    // This is the primary function for running your route.\n    // Usually it just renders a template to a page. But it\n    // might also perform some conditional logic. Override\n    // the data context by providing it as an option in the\n    // last parameter.\n    this.render('applications', {/* data: {} */});\n  }\n});","ast":null,"map":{"version":3,"sources":["/controller/mainController.js"],"names":[],"mappings":"AAAA,iBAAiB,gBAAgB,MAAhB,CAAuB;AACtC,iBAAe,yBAAY;;;;AAIzB,SAAK,SAAL,CAAe,OAAf,EAAwB,IAAxB;;;;;;AAMD,GAXqC;;AAatC,QAAM,gBAAY;AAChB,WAAO;AACL,aAAO,MAAM,IAAN,CAAW,EAAX,EAAe,EAAE,MAAK,EAAE,WAAW,CAAC,CAAd,EAAP,EAA0B,OAAM,CAAhC,EAAf;AADF,KAAP;;;AAKD,GAnBqC;;AAqBtC,UAAQ,kBAAY;;;;;;;;AAQlB,SAAK,MAAL,CAAY,cAAZ,EAA4B,C,cAAA,CAA5B;AACD;AA9BqC,CAAvB,CAAjB","file":"/controller/mainController.js.map","sourcesContent":["mainController = RouteController.extend({\n  subscriptions: function () {\n    // set up the subscriptions for the route and optionally\n    // wait on them like this:\n    //\n    this.subscribe('rsvps').wait();\n    //\n    // \"Waiting\" on a subscription does not block. Instead,\n    // the subscription handle is added to a reactive list\n    // and when all items in this list are ready, this.ready()\n    // returns true in any of your route functions.\n  },\n\n  data: function () {\n    return {\n      rsvps: Rsvps.find({}, { sort:{ createdAt: -1 }, limit:1 })\n    }\n    // return a global data context like this:\n    // Items.findOne({_id: this.params._id});\n  },\n\n  action: function () {\n    \n    // You can create as many action functions as you'd like.\n    // This is the primary function for running your route.\n    // Usually it just renders a template to a page. But it\n    // might also perform some conditional logic. Override\n    // the data context by providing it as an option in the\n    // last parameter.\n    this.render('applications', { /* data: {} */});\n  }\n});\n"]},"hash":"cb39cb01fb9a86e45d453abb5bb1539bd9996f87"}
