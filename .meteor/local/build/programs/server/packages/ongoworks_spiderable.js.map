{"version":3,"sources":["meteor://ðŸ’»app/packages/ongoworks_spiderable/packages/ongoworks_spiderable.js"],"names":[],"mappingsfile":"/packages/ongoworks_spiderable.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks:spiderable/spiderable.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nSpiderable = {};                                                                                                       // 1\n                                                                                                                       // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks:spiderable/spiderable_server.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar fs = Npm.require('fs');                                                                                            // 1\nvar child_process = Npm.require('child_process');                                                                      // 2\nvar querystring = Npm.require('querystring');                                                                          // 3\nvar urlParser = Npm.require('url');                                                                                    // 4\nvar crypto = Npm.require('crypto');                                                                                    // 5\n                                                                                                                       // 6\n// list of bot user agents that we want to serve statically, but do                                                    // 7\n// not obey the _escaped_fragment_ protocol. The page is served                                                        // 8\n// statically to any client whos user agent matches any of these                                                       // 9\n// regexps. Users may modify this array.                                                                               // 10\n//                                                                                                                     // 11\n// An original goal with the spiderable package was to avoid doing                                                     // 12\n// user-agent based tests. But the reality is not enough bots support                                                  // 13\n// the _escaped_fragment_ protocol, so we need to hardcode a list                                                      // 14\n// here. I shed a silent tear.                                                                                         // 15\nSpiderable.userAgentRegExps = [                                                                                        // 16\n    /^facebookexternalhit/i, /^linkedinbot/i, /^twitterbot/i];                                                         // 17\n                                                                                                                       // 18\n// how long to let phantomjs run before we kill it                                                                     // 19\nvar REQUEST_TIMEOUT = 15*1000;                                                                                         // 20\n// maximum size of result HTML. node's default is 200k which is too                                                    // 21\n// small for our docs.                                                                                                 // 22\nvar MAX_BUFFER = 5*1024*1024; // 5MB                                                                                   // 23\n                                                                                                                       // 24\n// Exported for tests.                                                                                                 // 25\nSpiderable._urlForPhantom = function (siteAbsoluteUrl, requestUrl) {                                                   // 26\n  // reassembling url without escaped fragment if exists                                                               // 27\n  var parsedUrl = urlParser.parse(requestUrl);                                                                         // 28\n  var parsedQuery = querystring.parse(parsedUrl.query);                                                                // 29\n  delete parsedQuery['_escaped_fragment_'];                                                                            // 30\n  var parsedAbsoluteUrl = urlParser.parse(siteAbsoluteUrl);                                                            // 31\n  // If the ROOT_URL contains a path, Meteor strips that path off of the                                               // 32\n  // request's URL before we see it. So we concatenate the pathname from                                               // 33\n  // the request's URL with the root URL's pathname to get the full                                                    // 34\n  // pathname.                                                                                                         // 35\n  if (parsedUrl.pathname.charAt(0) === \"/\") {                                                                          // 36\n    parsedUrl.pathname = parsedUrl.pathname.substring(1);                                                              // 37\n  }                                                                                                                    // 38\n  parsedAbsoluteUrl.pathname = urlParser.resolve(parsedAbsoluteUrl.pathname,                                           // 39\n                                                 parsedUrl.pathname);                                                  // 40\n  parsedAbsoluteUrl.query = parsedQuery;                                                                               // 41\n  // `url.format` will only use `query` if `search` is absent                                                          // 42\n  parsedAbsoluteUrl.search = null;                                                                                     // 43\n                                                                                                                       // 44\n  return urlParser.format(parsedAbsoluteUrl);                                                                          // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nvar PHANTOM_SCRIPT = Assets.getText(\"phantom_script.js\");                                                              // 48\n                                                                                                                       // 49\nWebApp.connectHandlers.use(function (req, res, next) {                                                                 // 50\n  // _escaped_fragment_ comes from Google's AJAX crawling spec:                                                        // 51\n  // https://developers.google.com/webmasters/ajax-crawling/docs/specification                                         // 52\n  // This spec was designed during the brief era where using \"#!\" URLs was                                             // 53\n  // common, so it mostly describes how to translate \"#!\" URLs into                                                    // 54\n  // _escaped_fragment_ URLs. Since then, \"#!\" URLs have gone out of style, but                                        // 55\n  // the <meta name=\"fragment\" content=\"!\"> (see spiderable.html) approach also                                        // 56\n  // described in the spec is still common and used by several crawlers.                                               // 57\n  if (/\\?.*_escaped_fragment_=/.test(req.url) ||                                                                       // 58\n      _.any(Spiderable.userAgentRegExps, function (re) {                                                               // 59\n        return re.test(req.headers['user-agent']); })) {                                                               // 60\n                                                                                                                       // 61\n    // handle a port assigned even (should be siteAbsoluteUrl)                                                         // 62\n                                                                                                                       // 63\n    // use Docker hostname if available to deal with proxy, otherwise append port if defined                           // 64\n    // need to also detemine if ssl is local or via proxy, this currently assumes ssl is in proxy                      // 65\n    var port = '80';                                                                                                   // 66\n    if (process.env.PORT)                                                                                              // 67\n      port = process.env.PORT                                                                                          // 68\n                                                                                                                       // 69\n    // are we using force-ssl, then use localhost                                                                      // 70\n    // per http://docs.meteor.com/#forcessl                                                                            // 71\n    // unencrypted connections from localhost are always accepted over HTTP.                                           // 72\n    // TBD: exploits unknown                                                                                           // 73\n                                                                                                                       // 74\n    if (Meteor.absoluteUrl.defaultOptions.secure == true || process.env.PORT){                                         // 75\n      var absoluteUrl = \"http://localhost:\" + port;                                                                    // 76\n    } else {                                                                                                           // 77\n      var absoluteUrl = Meteor.absoluteUrl();                                                                          // 78\n    }                                                                                                                  // 79\n                                                                                                                       // 80\n                                                                                                                       // 81\n    var url = Spiderable._urlForPhantom(absoluteUrl , req.url);                                                        // 82\n                                                                                                                       // 83\n    // This string is going to be put into a bash script, so it's important                                            // 84\n    // that 'url' (which comes from the network) can neither exploit phantomjs                                         // 85\n    // or the bash script. JSON stringification should prevent it from                                                 // 86\n    // exploiting phantomjs, and since the output of JSON.stringify shouldn't                                          // 87\n    // be able to contain newlines, it should be unable to exploit bash as                                             // 88\n    // well.                                                                                                           // 89\n    var phantomScript = \"var url = \" + JSON.stringify(url) + \";\" +                                                     // 90\n          PHANTOM_SCRIPT;                                                                                              // 91\n                                                                                                                       // 92\n    // Run phantomjs.                                                                                                  // 93\n    //                                                                                                                 // 94\n    // Use '/dev/stdin' to avoid writing to a temporary file. We can't                                                 // 95\n    // just omit the file, as PhantomJS takes that to mean 'use a                                                      // 96\n    // REPL' and exits as soon as stdin closes.                                                                        // 97\n    //                                                                                                                 // 98\n    // However, Node 0.8 broke the ability to open /dev/stdin in the                                                   // 99\n    // subprocess, so we can't just write our string to the process's stdin                                            // 100\n    // directly; see https://gist.github.com/3751746 for the gory details. We                                          // 101\n    // work around this with a bash heredoc. (We previous used a \"cat |\"                                               // 102\n    // instead, but that meant we couldn't use exec and had to manage several                                          // 103\n    // processes.)                                                                                                     // 104\n                                                                                                                       // 105\n    // DOCKER ISSUE: Phatomjs on docker doesn't work well with stdin.                                                  // 106\n    // WORKAROUND: Write script to a temporary file. (this part forked from http://atmospherejs.com/lemmih/spiderable) // 107\n                                                                                                                       // 108\n    // ongoworks: Note: tmp solution might not work with corodova/mobile builds                                        // 109\n                                                                                                                       // 110\n    var filename = '/tmp/meteor_'+crypto.randomBytes(4).readUInt32LE(0);                                               // 111\n    fs.writeFileSync(filename, phantomScript);                                                                         // 112\n    child_process.execFile(                                                                                            // 113\n      '/bin/bash',                                                                                                     // 114\n      ['-c',                                                                                                           // 115\n       (\"exec phantomjs --load-images=no --ignore-ssl-errors=yes \" + filename)],                                       // 116\n      {timeout: REQUEST_TIMEOUT, maxBuffer: MAX_BUFFER},                                                               // 117\n      function (error, stdout, stderr) {                                                                               // 118\n        fs.unlink(filename);                                                                                           // 119\n        if (!error && /<html/i.test(stdout)) {                                                                         // 120\n          res.writeHead(200, {'Content-Type': 'text/html; charset=UTF-8'});                                            // 121\n          res.end(stdout);                                                                                             // 122\n        } else {                                                                                                       // 123\n          // phantomjs failed. Don't send the error, instead send the                                                  // 124\n          // normal page.                                                                                              // 125\n          if (error && error.code === 127)                                                                             // 126\n            Meteor._debug(\"spiderable: phantomjs not installed. Download and install from http://phantomjs.org/\");     // 127\n          else                                                                                                         // 128\n            Meteor._debug(\"spiderable: phantomjs failed:\", error, \"\\nstderr:\", stderr);                                // 129\n                                                                                                                       // 130\n          next();                                                                                                      // 131\n        }                                                                                                              // 132\n      });                                                                                                              // 133\n  } else {                                                                                                             // 134\n    next();                                                                                                            // 135\n  }                                                                                                                    // 136\n});                                                                                                                    // 137\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}