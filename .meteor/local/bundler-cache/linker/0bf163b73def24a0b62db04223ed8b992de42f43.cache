[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar IronRouterHelper = Package['ostrio:iron-router-helper-class'].IronRouterHelper;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar __coffeescriptShare;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/ostrio_iron-router-meta/iron-router-meta.coffee.js                                                   //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar IronRouterMeta,                                                                                              // 1\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                   //\n                                                                                                                 //\nIronRouterMeta = (function(superClass) {                                                                         // 1\n  extend(IronRouterMeta, superClass);                                                                            //\n                                                                                                                 //\n  function IronRouterMeta(router) {                                                                              //\n    this.router = router;                                                                                        //\n    IronRouterMeta.__super__.constructor.call(this, this.router);                                                //\n    this.router.onAfterAction((function(_this) {                                                                 //\n      return function() {                                                                                        //\n        var links, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, scripts, tags;\n        $('[data-link-name], [data-meta-name], [data-script-name]').remove();                                    //\n        tags = [];                                                                                               //\n        if ((ref = _this.router) != null ? (ref1 = ref.options) != null ? ref1.meta : void 0 : void 0) {         //\n          tags.push(_this.router.options.meta);                                                                  //\n        }                                                                                                        //\n        if (((ref2 = _this.currentController) != null ? ref2.prototype : void 0) && _.has(_this.currentController.prototype, 'meta')) {\n          tags.push(_this.currentController.prototype['meta']);                                                  //\n        }                                                                                                        //\n        if ((ref3 = _this.currentRoute) != null ? (ref4 = ref3.route) != null ? (ref5 = ref4.options) != null ? ref5.meta : void 0 : void 0 : void 0) {\n          tags.push(_this.currentRoute.route.options.meta);                                                      //\n        }                                                                                                        //\n        if (tags.length) {                                                                                       //\n          _this.addTag(tags);                                                                                    //\n        }                                                                                                        //\n        links = [];                                                                                              //\n        if ((ref6 = _this.router) != null ? (ref7 = ref6.options) != null ? ref7.link : void 0 : void 0) {       //\n          links.push(_this.router.options.link);                                                                 //\n        }                                                                                                        //\n        if (((ref8 = _this.currentController) != null ? ref8.prototype : void 0) && _.has(_this.currentController.prototype, 'link')) {\n          links.push(_this.currentController.prototype['link']);                                                 //\n        }                                                                                                        //\n        if ((ref9 = _this.currentRoute) != null ? (ref10 = ref9.route) != null ? (ref11 = ref10.options) != null ? ref11.link : void 0 : void 0 : void 0) {\n          links.push(_this.currentRoute.route.options.link);                                                     //\n        }                                                                                                        //\n        if (links.length) {                                                                                      //\n          _this.addLink(links);                                                                                  //\n        }                                                                                                        //\n        scripts = [];                                                                                            //\n        if ((ref12 = _this.router) != null ? (ref13 = ref12.options) != null ? ref13.script : void 0 : void 0) {\n          scripts.push(_this.router.options.script);                                                             //\n        }                                                                                                        //\n        if (((ref14 = _this.currentController) != null ? ref14.prototype : void 0) && _.has(_this.currentController.prototype, 'script')) {\n          scripts.push(_this.currentController.prototype['script']);                                             //\n        }                                                                                                        //\n        if ((ref15 = _this.currentRoute) != null ? (ref16 = ref15.route) != null ? (ref17 = ref16.options) != null ? ref17.script : void 0 : void 0 : void 0) {\n          scripts.push(_this.currentRoute.route.options.script);                                                 //\n        }                                                                                                        //\n        if (scripts.length) {                                                                                    //\n          return _this.addScript(scripts);                                                                       //\n        }                                                                                                        //\n      };                                                                                                         //\n    })(this));                                                                                                   //\n  }                                                                                                              //\n                                                                                                                 //\n  IronRouterMeta.prototype.updateNode = function(type, name, values, isClosing) {                                //\n    var attrName, content, element;                                                                              // 26\n    if (isClosing == null) {                                                                                     //\n      isClosing = false;                                                                                         //\n    }                                                                                                            //\n    if ($('head').has(type + '[data-' + type + '-name=\"' + name + '\"]')[0]) {                                    //\n      $(type + '[data-' + type + '-name=\"' + name + '\"]').remove();                                              //\n    }                                                                                                            //\n    if (isClosing) {                                                                                             //\n      element = $('<' + type + ' data-' + type + '-name=\"' + name + '\"></' + type + '>');                        //\n    } else {                                                                                                     //\n      element = $('<' + type + ' data-' + type + '-name=\"' + name + '\" />');                                     //\n    }                                                                                                            //\n    for (attrName in values) {                                                                                   // 33\n      content = values[attrName];                                                                                //\n      if (_.isFunction(content)) {                                                                               //\n        content = content.call(this.currentRoute);                                                               //\n      }                                                                                                          //\n      if (content) {                                                                                             //\n        element.attr(attrName, content);                                                                         //\n      }                                                                                                          //\n    }                                                                                                            // 33\n    return $('head').prepend(element);                                                                           //\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype._prepare = function(settings) {                                                       //\n    var _settings, i, len, set;                                                                                  // 39\n    _settings = {};                                                                                              //\n    for (i = 0, len = settings.length; i < len; i++) {                                                           // 40\n      set = settings[i];                                                                                         //\n      if (_.isFunction(set)) {                                                                                   //\n        _settings = _.extend(_settings, set.call(this.currentRoute));                                            //\n      } else if (_.isObject(set)) {                                                                              //\n        _settings = _.extend(_settings, set);                                                                    //\n      }                                                                                                          //\n    }                                                                                                            // 40\n    return _settings;                                                                                            // 45\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype.addTag = function(settings) {                                                         //\n    var _settings, name, results, values;                                                                        // 48\n    _settings = this._prepare(settings);                                                                         //\n    results = [];                                                                                                // 50\n    for (name in _settings) {                                                                                    //\n      values = _settings[name];                                                                                  //\n      if (_.isFunction(values)) {                                                                                //\n        values = values.call(this.currentRoute);                                                                 //\n      }                                                                                                          //\n      if (_.isString(values)) {                                                                                  //\n        values = {                                                                                               //\n          content: values,                                                                                       //\n          name: name                                                                                             //\n        };                                                                                                       //\n      }                                                                                                          //\n      results.push(this.updateNode('meta', name, values));                                                       //\n    }                                                                                                            // 50\n    return results;                                                                                              //\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype.addLink = function(settings) {                                                        //\n    var _settings, name, results, values;                                                                        // 56\n    _settings = this._prepare(settings);                                                                         //\n    results = [];                                                                                                // 58\n    for (name in _settings) {                                                                                    //\n      values = _settings[name];                                                                                  //\n      if (_.isFunction(values)) {                                                                                //\n        values = values.call(this.currentRoute);                                                                 //\n      }                                                                                                          //\n      if (_.isString(values)) {                                                                                  //\n        values = {                                                                                               //\n          href: values,                                                                                          //\n          rel: name                                                                                              //\n        };                                                                                                       //\n      }                                                                                                          //\n      results.push(this.updateNode('link', name, values));                                                       //\n    }                                                                                                            // 58\n    return results;                                                                                              //\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype.addScript = function(settings) {                                                      //\n    var _settings, name, results, values;                                                                        // 64\n    _settings = this._prepare(settings);                                                                         //\n    results = [];                                                                                                // 66\n    for (name in _settings) {                                                                                    //\n      values = _settings[name];                                                                                  //\n      if (_.isFunction(values)) {                                                                                //\n        values = values.call(this.currentRoute);                                                                 //\n      }                                                                                                          //\n      if (_.isString(values)) {                                                                                  //\n        values = {                                                                                               //\n          src: values,                                                                                           //\n          type: 'text/javascript'                                                                                //\n        };                                                                                                       //\n      }                                                                                                          //\n      results.push(this.updateNode('script', name, values, true));                                               //\n    }                                                                                                            // 66\n    return results;                                                                                              //\n  };                                                                                                             //\n                                                                                                                 //\n  return IronRouterMeta;                                                                                         //\n                                                                                                                 //\n})(IronRouterHelper);                                                                                            //\n                                                                                                                 //\nMeteor.startup(function() {                                                                                      // 71\n  return new IronRouterMeta(Router);                                                                             //\n});                                                                                                              // 71\n                                                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ostrio:iron-router-meta'] = {};\n\n})();\n","servePath":"/packages/ostrio_iron-router-meta.js","sourceMap":{"version":3,"sources":["/packages/ostrio_iron-router-meta/iron-router-meta.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;EAAA;;;AAAM;;;EACS,wBAAC,MAAD;IAAC,IAAC,UAAD;IACZ,gDAAM,IAAC,OAAP;IACA,IAAC,OAAM,CAAC,aAAR,CAAsB;aAAA;AACpB;QAAA,EAAE,wDAAF,CAA2D,CAAC,MAA5D;QAEA,OAAO;QACP,sEAAkD,CAAE,sBAApD;UAAA,IAAI,CAAC,IAAL,CAAU,KAAC,OAAM,CAAC,OAAO,CAAC,IAA1B;;QACA,oDAA4D,CAAE,mBAApB,IAAkC,CAAC,CAAC,GAAF,CAAM,KAAC,kBAAiB,UAAxB,EAA4B,MAA5B,CAA5E;UAAA,IAAI,CAAC,IAAL,CAAU,KAAC,kBAAiB,UAAG,QAA/B;;QACA,4GAA2E,CAAE,+BAA7E;UAAA,IAAI,CAAC,IAAL,CAAU,KAAC,aAAY,CAAC,KAAK,CAAC,OAAO,CAAC,IAAtC;;QACA,IAAgB,IAAI,CAAC,MAArB;UAAA,KAAC,OAAD,CAAQ,IAAR;;QAEA,QAAQ;QACR,wEAAmD,CAAE,sBAArD;UAAA,KAAK,CAAC,IAAN,CAAW,KAAC,OAAM,CAAC,OAAO,CAAC,IAA3B;;QACA,oDAA6D,CAAE,mBAApB,IAAkC,CAAC,CAAC,GAAF,CAAM,KAAC,kBAAiB,UAAxB,EAA4B,MAA5B,CAA7E;UAAA,KAAK,CAAC,IAAN,CAAW,KAAC,kBAAiB,UAAG,QAAhC;;QACA,gHAA4E,CAAE,+BAA9E;UAAA,KAAK,CAAC,IAAN,CAAW,KAAC,aAAY,CAAC,KAAK,CAAC,OAAO,CAAC,IAAvC;;QACA,IAAkB,KAAK,CAAC,MAAxB;UAAA,KAAC,QAAD,CAAS,KAAT;;QAEA,UAAU;QACV,4EAAuD,CAAE,wBAAzD;UAAA,OAAO,CAAC,IAAR,CAAa,KAAC,OAAM,CAAC,OAAO,CAAC,MAA7B;;QACA,sDAAiE,CAAE,mBAApB,IAAkC,CAAC,CAAC,GAAF,CAAM,KAAC,kBAAiB,UAAxB,EAA4B,QAA5B,CAAjF;UAAA,OAAO,CAAC,IAAR,CAAa,KAAC,kBAAiB,UAAG,UAAlC;;QACA,kHAAgF,CAAE,iCAAlF;UAAA,OAAO,CAAC,IAAR,CAAa,KAAC,aAAY,CAAC,KAAK,CAAC,OAAO,CAAC,MAAzC;;QACA,IAAsB,OAAO,CAAC,MAA9B;iBAAA,KAAC,UAAD,CAAW,OAAX;;MAnBoB;IAAA,QAAtB;EAFW;;2BAuBb,aAAY,SAAC,IAAD,EAAO,IAAP,EAAa,MAAb,EAAqB,SAArB;AACV;;MAD+B,YAAY;;IAC3C,IAAG,EAAE,MAAF,CAAS,CAAC,GAAV,CAAc,OAAO,QAAP,GAAkB,IAAlB,GAAyB,SAAzB,GAAqC,IAArC,GAA4C,IAA1D,CAAgE,GAAnE;MACE,EAAE,OAAO,QAAP,GAAkB,IAAlB,GAAyB,SAAzB,GAAqC,IAArC,GAA4C,IAA9C,CAAmD,CAAC,MAApD,GADF;;IAGA,IAAG,SAAH;MACE,UAAU,EAAE,MAAM,IAAN,GAAa,QAAb,GAAwB,IAAxB,GAA+B,SAA/B,GAA2C,IAA3C,GAAkD,MAAlD,GAA2D,IAA3D,GAAkE,GAApE,EADZ;KAAA;MAGE,UAAU,EAAE,MAAM,IAAN,GAAa,QAAb,GAAwB,IAAxB,GAA+B,SAA/B,GAA2C,IAA3C,GAAkD,MAApD,EAHZ;;AAIA;;MACE,IAAwC,CAAC,CAAC,UAAF,CAAa,OAAb,CAAxC;QAAA,UAAU,OAAO,CAAC,IAAR,CAAa,IAAC,aAAd,EAAV;;MACA,IAAkC,OAAlC;QAAA,OAAO,CAAC,IAAR,CAAa,QAAb,EAAuB,OAAvB;;AAFF;WAGA,EAAE,MAAF,CAAS,CAAC,OAAV,CAAkB,OAAlB;EAXU;;2BAaZ,WAAU,SAAC,QAAD;AACR;IAAA,YAAY;AACZ;;MACE,IAAG,CAAC,CAAC,UAAF,CAAa,GAAb,CAAH;QACE,YAAY,CAAC,CAAC,MAAF,CAAS,SAAT,EAAoB,GAAG,CAAC,IAAJ,CAAS,IAAC,aAAV,CAApB,EADd;OAAA,MAEK,IAAG,CAAC,CAAC,QAAF,CAAW,GAAX,CAAH;QACH,YAAY,CAAC,CAAC,MAAF,CAAS,SAAT,EAAoB,GAApB,EADT;;AAHP;AAKA,WAAO;EAPC;;2BASV,SAAQ,SAAC,QAAD;AACN;IAAA,YAAY,IAAC,SAAD,CAAU,QAAV;AAEZ;SAAA;;MACE,IAAsC,CAAC,CAAC,UAAF,CAAa,MAAb,CAAtC;QAAA,SAAS,MAAM,CAAC,IAAP,CAAY,IAAC,aAAb,EAAT;;MACA,IAA0C,CAAC,CAAC,QAAF,CAAW,MAAX,CAA1C;QAAA,SAAS;UAAC,SAAS,MAAV;UAAkB,MAAM,IAAxB;UAAT;;mBACA,IAAC,WAAD,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B;AAHF;;EAHM;;2BAQR,UAAS,SAAC,QAAD;AACP;IAAA,YAAY,IAAC,SAAD,CAAU,QAAV;AAEZ;SAAA;;MACE,IAAsC,CAAC,CAAC,UAAF,CAAa,MAAb,CAAtC;QAAA,SAAS,MAAM,CAAC,IAAP,CAAY,IAAC,aAAb,EAAT;;MACA,IAAsC,CAAC,CAAC,QAAF,CAAW,MAAX,CAAtC;QAAA,SAAS;UAAC,MAAM,MAAP;UAAe,KAAK,IAApB;UAAT;;mBACA,IAAC,WAAD,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B;AAHF;;EAHO;;2BAQT,YAAW,SAAC,QAAD;AACT;IAAA,YAAY,IAAC,SAAD,CAAU,QAAV;AAEZ;SAAA;;MACE,IAAsC,CAAC,CAAC,UAAF,CAAa,MAAb,CAAtC;QAAA,SAAS,MAAM,CAAC,IAAP,CAAY,IAAC,aAAb,EAAT;;MACA,IAAmD,CAAC,CAAC,QAAF,CAAW,MAAX,CAAnD;QAAA,SAAS;UAAC,KAAK,MAAN;UAAc,MAAM,iBAApB;UAAT;;mBACA,IAAC,WAAD,CAAY,QAAZ,EAAsB,IAAtB,EAA4B,MAA5B,EAAoC,IAApC;AAHF;;EAHS;;;;GA9DgB;;AAsE7B,MAAM,CAAC,OAAP,CAAe;SAAO,mBAAe,MAAf;AAAP,CAAf","file":"/packages/ostrio_iron-router-meta.js","sourcesContent":["class IronRouterMeta extends IronRouterHelper\n  constructor: (@router) -> \n    super @router\n    @router.onAfterAction =>\n      $('[data-link-name], [data-meta-name], [data-script-name]').remove()\n\n      tags = []\n      tags.push @router.options.meta if @router?.options?.meta\n      tags.push @currentController::['meta'] if @currentController?.prototype and _.has(@currentController::, 'meta')\n      tags.push @currentRoute.route.options.meta if @currentRoute?.route?.options?.meta\n      @addTag tags if tags.length\n\n      links = []\n      links.push @router.options.link if @router?.options?.link\n      links.push @currentController::['link'] if @currentController?.prototype and _.has(@currentController::, 'link')\n      links.push @currentRoute.route.options.link if @currentRoute?.route?.options?.link\n      @addLink links if links.length\n\n      scripts = []\n      scripts.push @router.options.script if @router?.options?.script\n      scripts.push @currentController::['script'] if @currentController?.prototype and _.has(@currentController::, 'script')\n      scripts.push @currentRoute.route.options.script if @currentRoute?.route?.options?.script\n      @addScript scripts if scripts.length\n\n  updateNode: (type, name, values, isClosing = false) ->\n    if $('head').has(type + '[data-' + type + '-name=\"' + name + '\"]')[0]\n      $(type + '[data-' + type + '-name=\"' + name + '\"]').remove() \n\n    if isClosing\n      element = $ '<' + type + ' data-' + type + '-name=\"' + name + '\"></' + type + '>'\n    else\n      element = $ '<' + type + ' data-' + type + '-name=\"' + name + '\" />'\n    for attrName, content of values\n      content = content.call @currentRoute if _.isFunction content\n      element.attr attrName, content if content\n    $('head').prepend element\n\n  _prepare: (settings) ->\n    _settings = {}\n    for set in settings\n      if _.isFunction set\n        _settings = _.extend(_settings, set.call(@currentRoute))\n      else if _.isObject set\n        _settings = _.extend(_settings, set)\n    return _settings\n\n  addTag: (settings) ->\n    _settings = @_prepare settings\n\n    for name, values of _settings\n      values = values.call @currentRoute if _.isFunction values\n      values = {content: values, name: name} if _.isString values\n      @updateNode 'meta', name, values\n\n  addLink: (settings) ->\n    _settings = @_prepare settings\n\n    for name, values of _settings\n      values = values.call @currentRoute if _.isFunction values\n      values = {href: values, rel: name} if _.isString values\n      @updateNode 'link', name, values\n\n  addScript: (settings) ->\n    _settings = @_prepare settings\n\n    for name, values of _settings\n      values = values.call @currentRoute if _.isFunction values\n      values = {src: values, type: 'text/javascript'} if _.isString values\n      @updateNode 'script', name, values, true\n\nMeteor.startup -> new IronRouterMeta Router"]}}]