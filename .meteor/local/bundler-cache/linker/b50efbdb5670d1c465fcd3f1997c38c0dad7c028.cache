[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Promise = Package.promise.Promise;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Reload = Package.reload.Reload;\n\n/* Package-scope variables */\nvar hcp, HotCodePush, RouterAutoscroll;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/okgrow_router-autoscroll/client/hot-code-push.js                                    //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n//named reactive-dict are persisted across hot code push                                        // 1\nhcp = new ReactiveDict(\"okgrow-hot-code-push\");                                                 // 2\n                                                                                                // 3\nvar fakeStartPromise = {                                                                        // 4\n  'then': function (actionFn) {                                                                 // 5\n    //debug(\"scheduled begin and end hook\")                                                     // 6\n    hcp.set(\"has-hcp-hook\", true);                                                              // 7\n    Reload._onMigrate(function () {                                                             // 8\n      try {                                                                                     // 9\n        actionFn()                                                                              // 10\n      } catch(ex) {;}                                                                           // 11\n      return [true];                                                                            // 12\n    });                                                                                         // 13\n    return fakeStartPromise;                                                                    // 14\n  }                                                                                             // 15\n};                                                                                              // 16\n                                                                                                // 17\nHotCodePush = {                                                                                 // 18\n  start: fakeStartPromise,                                                                      // 19\n  end: new Promise(function (resolve) {                                                         // 20\n    hcp.set(\"has-hcp-hook\", true);                                                              // 21\n    window.addEventListener(\"load\", function () {                                               // 22\n      //debug(\"detected window load\")                                                           // 23\n      if( hcp.get(\"has-hcp-hook\") ){                                                            // 24\n        //debug(\"HotCodePush.end promise resolving\");                                           // 25\n        hcp.set(\"has-hcp-hook\", undefined);                                                     // 26\n        resolve(true);                                                                          // 27\n      }                                                                                         // 28\n    });                                                                                         // 29\n  })                                                                                            // 30\n};                                                                                              // 31\n                                                                                                // 32\nfunction debug(msg) {                                                                           // 33\n  console.info(msg);                                                                            // 34\n}                                                                                               // 35\n                                                                                                // 36\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/okgrow_router-autoscroll/client/router-autoscroll.js                                //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nRouterAutoscroll = {                                                                            // 1\n  animationDuration: 200,                                                                       // 2\n  marginTop: 0                                                                                  // 3\n};                                                                                              // 4\n                                                                                                // 5\nvar backToPosition;                                                                             // 6\n// Saved positions will survive a hot code push                                                 // 7\nvar scrollPositions = new ReactiveDict(\"okgrow-router-autoscroll\");                             // 8\n                                                                                                // 9\n// local variable for accessing jquery, if available                                            // 10\nvar _jQuery = false;                                                                            // 11\n                                                                                                // 12\nif (Package[\"jquery\"]) {                                                                        // 13\n  _jQuery = Package[\"jquery\"].jQuery;                                                           // 14\n}                                                                                               // 15\n                                                                                                // 16\nfunction saveScrollPosition () {                                                                // 17\n  scrollPositions.set(window.location.href, scrollTop());                                       // 18\n};                                                                                              // 19\n                                                                                                // 20\n//TODO use history state so we don't litter                                                     // 21\nwindow.onpopstate = function () {                                                               // 22\n  backToPosition = scrollPositions.get(window.location.href);                                   // 23\n};                                                                                              // 24\n                                                                                                // 25\n// Scroll to the right place after changing routes. \"The right place\" is:                       // 26\n// 1. The previous position if we're returning via the back button                              // 27\n// 2. The element whose id is specified in the URL hash                                         // 28\n// 3. The top of page otherwise                                                                 // 29\nfunction getScrollToPosition () {                                                               // 30\n  if (backToPosition) {                                                                         // 31\n    var oldPosition = backToPosition;                                                           // 32\n    backToPosition = undefined;                                                                 // 33\n    return oldPosition;                                                                         // 34\n  }                                                                                             // 35\n                                                                                                // 36\n  var id = window.location.hash.replace(\"#\", '');                                               // 37\n  var element;                                                                                  // 38\n                                                                                                // 39\n  // check if maintainScroll=1 exists                                                           // 40\n  if (id.indexOf('maintainScroll=1') > -1) {                                                    // 41\n    return undefined;                                                                           // 42\n  }                                                                                             // 43\n                                                                                                // 44\n  //HTML5 allows all kinds of ids, so we can't whitelist characters, only                       // 45\n  //decide the hash doesn't represent a DOM id if we fail                                       // 46\n  try {                                                                                         // 47\n    element = document.getElementById(id);                                                      // 48\n  } catch (ex) {                                                                                // 49\n    element = false;                                                                            // 50\n  }                                                                                             // 51\n  if (element) {                                                                                // 52\n    return element.getBoundingClientRect().top + scrollTop();                                   // 53\n  }                                                                                             // 54\n                                                                                                // 55\n  return 0;                                                                                     // 56\n}                                                                                               // 57\n                                                                                                // 58\n//Do the scroll, after the DOM update so that the position can be correct                       // 59\nvar scheduleScroll = function () {                                                              // 60\n  Tracker.afterFlush(function () {                                                              // 61\n    Meteor.defer(function () {                                                                  // 62\n      var position = getScrollToPosition();                                                     // 63\n      scrollTo(position);                                                                       // 64\n    });                                                                                         // 65\n  });                                                                                           // 66\n};                                                                                              // 67\n                                                                                                // 68\nvar flowScroll = function (newRoute) {                                                          // 69\n  var path = (newRoute.context && newRoute.context.pathname) || newRoute.path;                  // 70\n  if (path.indexOf(\"#\") == -1)                                                                  // 71\n    scrollTo(0);                                                                                // 72\n  else                                                                                          // 73\n    scheduleScroll();                                                                           // 74\n};                                                                                              // 75\n                                                                                                // 76\nfunction ironWhenReady (callFn) {                                                               // 77\n  return function () {                                                                          // 78\n    var self = this;                                                                            // 79\n    self.next();                                                                                // 80\n    // XXX in iron, why do we abort if not ready, shouldn't we try once ready?                  // 81\n    if (self.ready()) callFn();                                                                 // 82\n  }                                                                                             // 83\n}                                                                                               // 84\n                                                                                                // 85\n// use _jQuery if available, otherwise support IE9+                                             // 86\nvar scrollTop = function () {                                                                   // 87\n  if (_jQuery) {                                                                                // 88\n    return _jQuery(window).scrollTop();                                                         // 89\n  } else {                                                                                      // 90\n    // uses solution from http://stackoverflow.com/questions/871399/cross-browser-method-for-detecting-the-scrolltop-of-the-browser-window\n    return document.body.scrollTop || document.documentElement.scrollTop || window.pageYOffset;\n  }                                                                                             // 93\n}                                                                                               // 94\n                                                                                                // 95\nvar scrollTo = function (position) {                                                            // 96\n  if (_jQuery) {                                                                                // 97\n    _jQuery('body,html').animate({                                                              // 98\n      scrollTop: position - RouterAutoscroll.marginTop                                          // 99\n    }, RouterAutoscroll.animationDuration);                                                     // 100\n  } else {                                                                                      // 101\n    window.scroll(0, position - RouterAutoscroll.marginTop);                                    // 102\n  }                                                                                             // 103\n}                                                                                               // 104\n                                                                                                // 105\nif (Package['iron:router']) {                                                                   // 106\n  Package['iron:router'].Router.onRun(ironWhenReady(scheduleScroll));                           // 107\n  Package['iron:router'].Router.onStop(saveScrollPosition);                                     // 108\n}                                                                                               // 109\n                                                                                                // 110\nif (Package[\"kadira:flow-router\"]) {                                                            // 111\n  Package[\"kadira:flow-router\"].FlowRouter.triggers.enter([flowScroll]);                        // 112\n  Package[\"kadira:flow-router\"].FlowRouter.triggers.exit([saveScrollPosition]);                 // 113\n}                                                                                               // 114\n                                                                                                // 115\nif (Package[\"kadira:flow-router-ssr\"]) {                                                        // 116\n  Package[\"kadira:flow-router-ssr\"].FlowRouter.triggers.enter([flowScroll]);                    // 117\n  Package[\"kadira:flow-router-ssr\"].FlowRouter.triggers.exit([saveScrollPosition]);             // 118\n}                                                                                               // 119\n                                                                                                // 120\nif (Package[\"meteorhacks:flow-router\"]) {                                                       // 121\n  Package[\"meteorhacks:flow-router\"].FlowRouter.triggers.enter([flowScroll]);                   // 122\n  Package[\"meteorhacks:flow-router\"].FlowRouter.triggers.exit([saveScrollPosition]);            // 123\n}                                                                                               // 124\n                                                                                                // 125\nif (Package[\"meteorhacks:flow-router-ssr\"]) {                                                   // 126\n  Package[\"meteorhacks:flow-router-ssr\"].FlowRouter.triggers.enter([flowScroll]);               // 127\n  Package[\"meteorhacks:flow-router-ssr\"].FlowRouter.triggers.exit([saveScrollPosition]);        // 128\n}                                                                                               // 129\n                                                                                                // 130\nHotCodePush.start.then(function () {                                                            // 131\n  var currentScroll = scrollTop();                                                              // 132\n  scrollPositions.set(\"HotCodePushScrollPosition\", currentScroll);                              // 133\n});                                                                                             // 134\n                                                                                                // 135\nHotCodePush.end.then(function () {                                                              // 136\n  backToPosition = scrollPositions.get(\"HotCodePushScrollPosition\");                            // 137\n  if (backToPosition) {                                                                         // 138\n    scheduleScroll();                                                                           // 139\n  }                                                                                             // 140\n});                                                                                             // 141\n                                                                                                // 142\nRouterAutoscroll.scrollPositions = scrollPositions;                                             // 143\n                                                                                                // 144\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['okgrow:router-autoscroll'] = {\n  RouterAutoscroll: RouterAutoscroll\n};\n\n})();\n","servePath":"/packages/okgrow_router-autoscroll.js","sourceMap":{"version":3,"sources":["/packages/okgrow_router-autoscroll/client/hot-code-push.js","/packages/okgrow_router-autoscroll/client/router-autoscroll.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qG;;;;;;;;;;;;;;;;;;ACnsG","file":"/packages/okgrow_router-autoscroll.js","sourcesContent":["//named reactive-dict are persisted across hot code push\nhcp = new ReactiveDict(\"okgrow-hot-code-push\");\n\nvar fakeStartPromise = {\n  'then': function (actionFn) {\n    //debug(\"scheduled begin and end hook\")\n    hcp.set(\"has-hcp-hook\", true);\n    Reload._onMigrate(function () {\n      try {\n        actionFn()\n      } catch(ex) {;}\n      return [true];\n    });\n    return fakeStartPromise;\n  }\n};\n\nHotCodePush = {\n  start: fakeStartPromise,\n  end: new Promise(function (resolve) {\n    hcp.set(\"has-hcp-hook\", true);\n    window.addEventListener(\"load\", function () {\n      //debug(\"detected window load\")\n      if( hcp.get(\"has-hcp-hook\") ){\n        //debug(\"HotCodePush.end promise resolving\");\n        hcp.set(\"has-hcp-hook\", undefined);\n        resolve(true);\n      }\n    });\n  })\n};\n\nfunction debug(msg) {\n  console.info(msg);\n}\n","RouterAutoscroll = {\n  animationDuration: 200,\n  marginTop: 0\n};\n\nvar backToPosition;\n// Saved positions will survive a hot code push\nvar scrollPositions = new ReactiveDict(\"okgrow-router-autoscroll\");\n\n// local variable for accessing jquery, if available\nvar _jQuery = false;\n\nif (Package[\"jquery\"]) {\n  _jQuery = Package[\"jquery\"].jQuery;\n}\n\nfunction saveScrollPosition () {\n  scrollPositions.set(window.location.href, scrollTop());\n};\n\n//TODO use history state so we don't litter\nwindow.onpopstate = function () {\n  backToPosition = scrollPositions.get(window.location.href);\n};\n\n// Scroll to the right place after changing routes. \"The right place\" is:\n// 1. The previous position if we're returning via the back button\n// 2. The element whose id is specified in the URL hash\n// 3. The top of page otherwise\nfunction getScrollToPosition () {\n  if (backToPosition) {\n    var oldPosition = backToPosition;\n    backToPosition = undefined;\n    return oldPosition;\n  }\n\n  var id = window.location.hash.replace(\"#\", '');\n  var element;\n\n  // check if maintainScroll=1 exists\n  if (id.indexOf('maintainScroll=1') > -1) {\n    return undefined;\n  }\n\n  //HTML5 allows all kinds of ids, so we can't whitelist characters, only\n  //decide the hash doesn't represent a DOM id if we fail\n  try {\n    element = document.getElementById(id);\n  } catch (ex) {\n    element = false;\n  }\n  if (element) {\n    return element.getBoundingClientRect().top + scrollTop();\n  }\n\n  return 0;\n}\n\n//Do the scroll, after the DOM update so that the position can be correct\nvar scheduleScroll = function () {\n  Tracker.afterFlush(function () {\n    Meteor.defer(function () {\n      var position = getScrollToPosition();\n      scrollTo(position);\n    });\n  });\n};\n\nvar flowScroll = function (newRoute) {\n  var path = (newRoute.context && newRoute.context.pathname) || newRoute.path;\n  if (path.indexOf(\"#\") == -1)\n    scrollTo(0);\n  else\n    scheduleScroll();\n};\n\nfunction ironWhenReady (callFn) {\n  return function () {\n    var self = this;\n    self.next();\n    // XXX in iron, why do we abort if not ready, shouldn't we try once ready?\n    if (self.ready()) callFn();\n  }\n}\n\n// use _jQuery if available, otherwise support IE9+\nvar scrollTop = function () {\n  if (_jQuery) {\n    return _jQuery(window).scrollTop();\n  } else {\n    // uses solution from http://stackoverflow.com/questions/871399/cross-browser-method-for-detecting-the-scrolltop-of-the-browser-window\n    return document.body.scrollTop || document.documentElement.scrollTop || window.pageYOffset;\n  }\n}\n\nvar scrollTo = function (position) {\n  if (_jQuery) {\n    _jQuery('body,html').animate({\n      scrollTop: position - RouterAutoscroll.marginTop\n    }, RouterAutoscroll.animationDuration);\n  } else {\n    window.scroll(0, position - RouterAutoscroll.marginTop);\n  }\n}\n\nif (Package['iron:router']) {\n  Package['iron:router'].Router.onRun(ironWhenReady(scheduleScroll));\n  Package['iron:router'].Router.onStop(saveScrollPosition);\n}\n\nif (Package[\"kadira:flow-router\"]) {\n  Package[\"kadira:flow-router\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"kadira:flow-router\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nif (Package[\"kadira:flow-router-ssr\"]) {\n  Package[\"kadira:flow-router-ssr\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"kadira:flow-router-ssr\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nif (Package[\"meteorhacks:flow-router\"]) {\n  Package[\"meteorhacks:flow-router\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"meteorhacks:flow-router\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nif (Package[\"meteorhacks:flow-router-ssr\"]) {\n  Package[\"meteorhacks:flow-router-ssr\"].FlowRouter.triggers.enter([flowScroll]);\n  Package[\"meteorhacks:flow-router-ssr\"].FlowRouter.triggers.exit([saveScrollPosition]);\n}\n\nHotCodePush.start.then(function () {\n  var currentScroll = scrollTop();\n  scrollPositions.set(\"HotCodePushScrollPosition\", currentScroll);\n});\n\nHotCodePush.end.then(function () {\n  backToPosition = scrollPositions.get(\"HotCodePushScrollPosition\");\n  if (backToPosition) {\n    scheduleScroll();\n  }\n});\n\nRouterAutoscroll.scrollPositions = scrollPositions;\n"]}}]