[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar IronRouterHelper = Package['ostrio:iron-router-helper-class'].IronRouterHelper;\n\n/* Package-scope variables */\nvar __coffeescriptShare;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/ostrio_iron-router-meta/iron-router-meta.coffee.js                                                   //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar IronRouterMeta,                                                                                              // 1\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;                                                                                   //\n                                                                                                                 //\nIronRouterMeta = (function(superClass) {                                                                         // 1\n  extend(IronRouterMeta, superClass);                                                                            // 2\n                                                                                                                 //\n  function IronRouterMeta(router) {                                                                              // 2\n    this.router = router;                                                                                        // 3\n    IronRouterMeta.__super__.constructor.call(this, this.router);                                                // 3\n    this.router.onAfterAction((function(_this) {                                                                 // 3\n      return function() {                                                                                        //\n        var links, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, scripts, tags;\n        $('[data-link-name], [data-meta-name], [data-script-name]').remove();                                    // 5\n        tags = [];                                                                                               // 5\n        if ((ref = _this.router) != null ? (ref1 = ref.options) != null ? ref1.meta : void 0 : void 0) {         // 8\n          tags.push(_this.router.options.meta);                                                                  // 8\n        }                                                                                                        //\n        if (((ref2 = _this.currentController) != null ? ref2.prototype : void 0) && _.has(_this.currentController.prototype, 'meta')) {\n          tags.push(_this.currentController.prototype['meta']);                                                  // 9\n        }                                                                                                        //\n        if ((ref3 = _this.currentRoute) != null ? (ref4 = ref3.route) != null ? (ref5 = ref4.options) != null ? ref5.meta : void 0 : void 0 : void 0) {\n          tags.push(_this.currentRoute.route.options.meta);                                                      // 10\n        }                                                                                                        //\n        if (tags.length) {                                                                                       // 11\n          _this.addTag(tags);                                                                                    // 11\n        }                                                                                                        //\n        links = [];                                                                                              // 5\n        if ((ref6 = _this.router) != null ? (ref7 = ref6.options) != null ? ref7.link : void 0 : void 0) {       // 14\n          links.push(_this.router.options.link);                                                                 // 14\n        }                                                                                                        //\n        if (((ref8 = _this.currentController) != null ? ref8.prototype : void 0) && _.has(_this.currentController.prototype, 'link')) {\n          links.push(_this.currentController.prototype['link']);                                                 // 15\n        }                                                                                                        //\n        if ((ref9 = _this.currentRoute) != null ? (ref10 = ref9.route) != null ? (ref11 = ref10.options) != null ? ref11.link : void 0 : void 0 : void 0) {\n          links.push(_this.currentRoute.route.options.link);                                                     // 16\n        }                                                                                                        //\n        if (links.length) {                                                                                      // 17\n          _this.addLink(links);                                                                                  // 17\n        }                                                                                                        //\n        scripts = [];                                                                                            // 5\n        if ((ref12 = _this.router) != null ? (ref13 = ref12.options) != null ? ref13.script : void 0 : void 0) {\n          scripts.push(_this.router.options.script);                                                             // 20\n        }                                                                                                        //\n        if (((ref14 = _this.currentController) != null ? ref14.prototype : void 0) && _.has(_this.currentController.prototype, 'script')) {\n          scripts.push(_this.currentController.prototype['script']);                                             // 21\n        }                                                                                                        //\n        if ((ref15 = _this.currentRoute) != null ? (ref16 = ref15.route) != null ? (ref17 = ref16.options) != null ? ref17.script : void 0 : void 0 : void 0) {\n          scripts.push(_this.currentRoute.route.options.script);                                                 // 22\n        }                                                                                                        //\n        if (scripts.length) {                                                                                    // 23\n          return _this.addScript(scripts);                                                                       //\n        }                                                                                                        //\n      };                                                                                                         //\n    })(this));                                                                                                   //\n  }                                                                                                              //\n                                                                                                                 //\n  IronRouterMeta.prototype.updateNode = function(type, name, values, isClosing) {                                // 2\n    var attrName, content, element;                                                                              // 26\n    if (isClosing == null) {                                                                                     //\n      isClosing = false;                                                                                         //\n    }                                                                                                            //\n    if ($('head').has(type + '[data-' + type + '-name=\"' + name + '\"]')[0]) {                                    // 26\n      $(type + '[data-' + type + '-name=\"' + name + '\"]').remove();                                              // 27\n    }                                                                                                            //\n    if (isClosing) {                                                                                             // 29\n      element = $('<' + type + ' data-' + type + '-name=\"' + name + '\"></' + type + '>');                        // 30\n    } else {                                                                                                     //\n      element = $('<' + type + ' data-' + type + '-name=\"' + name + '\" />');                                     // 32\n    }                                                                                                            //\n    for (attrName in values) {                                                                                   // 33\n      content = values[attrName];                                                                                //\n      if (_.isFunction(content)) {                                                                               // 34\n        content = content.call(this.currentRoute);                                                               // 34\n      }                                                                                                          //\n      if (content) {                                                                                             // 35\n        element.attr(attrName, content);                                                                         // 35\n      }                                                                                                          //\n    }                                                                                                            // 33\n    return $('head').prepend(element);                                                                           //\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype._prepare = function(settings) {                                                       // 2\n    var _settings, i, len, set;                                                                                  // 39\n    _settings = {};                                                                                              // 39\n    for (i = 0, len = settings.length; i < len; i++) {                                                           // 40\n      set = settings[i];                                                                                         //\n      if (_.isFunction(set)) {                                                                                   // 41\n        _settings = _.extend(_settings, set.call(this.currentRoute));                                            // 42\n      } else if (_.isObject(set)) {                                                                              //\n        _settings = _.extend(_settings, set);                                                                    // 44\n      }                                                                                                          //\n    }                                                                                                            // 40\n    return _settings;                                                                                            // 45\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype.addTag = function(settings) {                                                         // 2\n    var _settings, name, results, values;                                                                        // 48\n    _settings = this._prepare(settings);                                                                         // 48\n    results = [];                                                                                                // 50\n    for (name in _settings) {                                                                                    //\n      values = _settings[name];                                                                                  //\n      if (_.isFunction(values)) {                                                                                // 51\n        values = values.call(this.currentRoute);                                                                 // 51\n      }                                                                                                          //\n      if (_.isString(values)) {                                                                                  // 52\n        values = {                                                                                               // 52\n          content: values,                                                                                       // 52\n          name: name                                                                                             // 52\n        };                                                                                                       //\n      }                                                                                                          //\n      results.push(this.updateNode('meta', name, values));                                                       // 51\n    }                                                                                                            // 50\n    return results;                                                                                              //\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype.addLink = function(settings) {                                                        // 2\n    var _settings, name, results, values;                                                                        // 56\n    _settings = this._prepare(settings);                                                                         // 56\n    results = [];                                                                                                // 58\n    for (name in _settings) {                                                                                    //\n      values = _settings[name];                                                                                  //\n      if (_.isFunction(values)) {                                                                                // 59\n        values = values.call(this.currentRoute);                                                                 // 59\n      }                                                                                                          //\n      if (_.isString(values)) {                                                                                  // 60\n        values = {                                                                                               // 60\n          href: values,                                                                                          // 60\n          rel: name                                                                                              // 60\n        };                                                                                                       //\n      }                                                                                                          //\n      results.push(this.updateNode('link', name, values));                                                       // 59\n    }                                                                                                            // 58\n    return results;                                                                                              //\n  };                                                                                                             //\n                                                                                                                 //\n  IronRouterMeta.prototype.addScript = function(settings) {                                                      // 2\n    var _settings, name, results, values;                                                                        // 64\n    _settings = this._prepare(settings);                                                                         // 64\n    results = [];                                                                                                // 66\n    for (name in _settings) {                                                                                    //\n      values = _settings[name];                                                                                  //\n      if (_.isFunction(values)) {                                                                                // 67\n        values = values.call(this.currentRoute);                                                                 // 67\n      }                                                                                                          //\n      if (_.isString(values)) {                                                                                  // 68\n        values = {                                                                                               // 68\n          src: values,                                                                                           // 68\n          type: 'text/javascript'                                                                                // 68\n        };                                                                                                       //\n      }                                                                                                          //\n      results.push(this.updateNode('script', name, values, true));                                               // 67\n    }                                                                                                            // 66\n    return results;                                                                                              //\n  };                                                                                                             //\n                                                                                                                 //\n  return IronRouterMeta;                                                                                         //\n                                                                                                                 //\n})(IronRouterHelper);                                                                                            //\n                                                                                                                 //\nMeteor.startup(function() {                                                                                      // 1\n  return new IronRouterMeta(Router);                                                                             //\n});                                                                                                              // 71\n                                                                                                                 //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ostrio:iron-router-meta'] = {};\n\n})();\n","servePath":"/packages/ostrio_iron-router-meta.js","sourceMap":{"version":3,"sources":["/packages/ostrio_iron-router-meta/iron-router-meta.coffee"],"names":[],"mappings":"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","file":"/packages/ostrio_iron-router-meta.js","sourcesContent":["class IronRouterMeta extends IronRouterHelper\n  constructor: (@router) -> \n    super @router\n    @router.onAfterAction =>\n      $('[data-link-name], [data-meta-name], [data-script-name]').remove()\n\n      tags = []\n      tags.push @router.options.meta if @router?.options?.meta\n      tags.push @currentController::['meta'] if @currentController?.prototype and _.has(@currentController::, 'meta')\n      tags.push @currentRoute.route.options.meta if @currentRoute?.route?.options?.meta\n      @addTag tags if tags.length\n\n      links = []\n      links.push @router.options.link if @router?.options?.link\n      links.push @currentController::['link'] if @currentController?.prototype and _.has(@currentController::, 'link')\n      links.push @currentRoute.route.options.link if @currentRoute?.route?.options?.link\n      @addLink links if links.length\n\n      scripts = []\n      scripts.push @router.options.script if @router?.options?.script\n      scripts.push @currentController::['script'] if @currentController?.prototype and _.has(@currentController::, 'script')\n      scripts.push @currentRoute.route.options.script if @currentRoute?.route?.options?.script\n      @addScript scripts if scripts.length\n\n  updateNode: (type, name, values, isClosing = false) ->\n    if $('head').has(type + '[data-' + type + '-name=\"' + name + '\"]')[0]\n      $(type + '[data-' + type + '-name=\"' + name + '\"]').remove() \n\n    if isClosing\n      element = $ '<' + type + ' data-' + type + '-name=\"' + name + '\"></' + type + '>'\n    else\n      element = $ '<' + type + ' data-' + type + '-name=\"' + name + '\" />'\n    for attrName, content of values\n      content = content.call @currentRoute if _.isFunction content\n      element.attr attrName, content if content\n    $('head').prepend element\n\n  _prepare: (settings) ->\n    _settings = {}\n    for set in settings\n      if _.isFunction set\n        _settings = _.extend(_settings, set.call(@currentRoute))\n      else if _.isObject set\n        _settings = _.extend(_settings, set)\n    return _settings\n\n  addTag: (settings) ->\n    _settings = @_prepare settings\n\n    for name, values of _settings\n      values = values.call @currentRoute if _.isFunction values\n      values = {content: values, name: name} if _.isString values\n      @updateNode 'meta', name, values\n\n  addLink: (settings) ->\n    _settings = @_prepare settings\n\n    for name, values of _settings\n      values = values.call @currentRoute if _.isFunction values\n      values = {href: values, rel: name} if _.isString values\n      @updateNode 'link', name, values\n\n  addScript: (settings) ->\n    _settings = @_prepare settings\n\n    for name, values of _settings\n      values = values.call @currentRoute if _.isFunction values\n      values = {src: values, type: 'text/javascript'} if _.isString values\n      @updateNode 'script', name, values, true\n\nMeteor.startup -> new IronRouterMeta Router"]}}]